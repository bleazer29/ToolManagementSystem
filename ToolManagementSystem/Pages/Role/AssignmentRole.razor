@page "/Role/AssignmentRole/{employeeId}"
@using ToolManagementSystem.Shared.Service
@using ToolManagementSystem.Shared.Models
@inject RolesService RolesService
@inject NavigationManager NavigationManager


    <div class="container">
        <h1>Назначение ролей</h1>
        <h2>Добавить или удалить роли для пользователя</h2>
        <br /><hr />
        <div class="container-fluid">
            @if (listRoles != null)
            {
                <EditForm Model="@listRoles">
                    @for (int i = 0; i < listRoles.Count; i++)
                    {
                        var local = i;
                        <div class="custom-control custom-checkbox">
                            <InputCheckbox @bind-Value="listRoles[local].IsSelected" class=" big-checkbox" />
                            <label class="form-check-label h4" for="@listRoles[local].IsSelected">
                                @listRoles[local].RoleName
                            </label>
                        </div>
                        <br />
                    }
                </EditForm>
                <div class="container-fluid">
                    <button type="submit" class="btn btn-primary col-6" @onclick="@UpdateEmployeeRole" >Update</button>
                    <button type="button" class="btn btn-primary col-4" @onclick="@Cancel">Cancel</button>
                </div>
            }
            else
            {
                <h5 class="card-title">None at the moment</h5>
            }
        </div>
    </div>


@code {
    [Parameter] public string employeeId { get; set; }
    List<Roles> listRoles;
    List<EmployeeRoles> employeeRoles;
    protected override async Task OnInitializedAsync()
    {
        listRoles = RolesService.GetRoles();
        employeeRoles = await RolesService.GetEmployeeRolesById(Convert.ToInt32(employeeId));
        foreach(var item in listRoles)
        {
            foreach (var item2 in employeeRoles)
            {
                if(item2.RoleId == item.Id)
                {
                    item.IsSelected = true;
                }
            }
        }
    }

    private async Task UpdateEmployeeRole()
    {
        await RolesService.EditUsersInRole(listRoles, Convert.ToInt32(employeeId));
        NavigationManager.NavigateTo("Employee/Employee");
    }


    public void Cancel()
    {
        NavigationManager.NavigateTo("Employee/Employee");
    }


}

